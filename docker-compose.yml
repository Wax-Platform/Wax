version: '3'

services:
  client:
    build:
      context: ./packages/client
      dockerfile: ./Dockerfile-development
    command: ['node_modules/.bin/coko-client-dev']
    ports:
      - ${CLIENT_PORT:-4000}:${CLIENT_PORT:-4000}
    environment:
      - NODE_ENV=development
      - CLIENT_PORT=${CLIENT_PORT:-4000}
      - CLIENT_FAST_REFRESH=1
      - CLIENT_PAGE_TITLE=${CLIENT_PAGE_TITLE:-Wax}
      - CLIENT_LANGUAGE=${CLIENT_LANGUAGE:-"en-US"}
      - CLIENT_FAVICON_PATH=${CLIENT_FAVICON_PATH:-../static/favicon.png}
      - CLIENT_WEBSOCKET_URL=${CLIENT_WEBSOCKET_URL:-ws://localhost:3001}
      - SERVER_URL=${SERVER_URL:-http://localhost:3000}
      - CLIENT_LOAD_EXTRA_THEME=${CLIENT_LOAD_EXTRA_THEME}
      - CLIENT_SHOW_EMAIL_LOGIN_OPTION=${CLIENT_SHOW_EMAIL_LOGIN_OPTION:-true}
    volumes:
      - ./packages/client/app:/home/node/app/app
      - ./packages/client/static:/home/node/app/static
    tty: true

  server:
    build:
      context: ./packages/server
      dockerfile: ./Dockerfile-development
    depends_on:
      - db
      - filehosting
    command: ['yarn', 'coko-server', 'start-dev']
    ports:
      - ${SERVER_PORT:-3000}:3000
      - ${WS_SERVER_PORT:-3001}:${WS_SERVER_PORT:-3001}
    environment:
      - NODE_ENV=development
      - PUBSWEET_SECRET=${PUBSWEET_SECRET:-dev_secret}
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-wax_dev}
      - POSTGRES_USER=${POSTGRES_USER:-dev_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_user_password}
      - WS_SERVER_PORT=${WS_SERVER_PORT:-3001}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:4000}
      - CHATGPT_URL=${CHATGPT_URL}
      - CHATGPT_KEY=${CHATGPT_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - MAILER_SENDER=${MAILER_SENDER:-dev@example.com}
      - MAILER_HOSTNAME=${MAILER_HOSTNAME}
      - MAILER_PORT=${MAILER_PORT}
      - MAILER_USER=${MAILER_USER}
      - MAILER_PASSWORD=${MAILER_PASSWORD}
      - PASSWORD_RESET_PATH=${PASSWORD_RESET_PATH:-password-reset}
      - CLIENT_SHOW_EMAIL_LOGIN_OPTION=${CLIENT_SHOW_EMAIL_LOGIN_OPTION:-true}
      - S3_URL=${S3_URL:-http://fileHosting:9000}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID:-nonRootUser}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY:-nonRootPassword}
      - S3_BUCKET=${S3_BUCKET:-uploads}
    volumes:
      - ./packages/server/api:/home/node/wax/api
      - ./packages/server/config:/home/node/wax/config
      - ./packages/server/controllers:/home/node/wax/controllers
      - ./packages/server/models:/home/node/wax/models
      - ./packages/server/scripts:/home/node/wax/scripts
      - ./packages/server/services:/home/node/wax/services
      # - ./packages/server/startServer.js:/home/node/wax/startServer.js

  db:
    build:
      context: .
      dockerfile: Dockerfile-pgvector
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-wax_dev}
      - POSTGRES_USER=${POSTGRES_USER:-dev_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_user_password}

  filehosting:
    image: minio/minio
    ports:
      - ${S3_PORT:-9000}:9000
      - ${MINIO_CONSOLE_PORT:-9001}:9001
    volumes:
      - minio_storage:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-superSecretAdminPassword}
    command: server --console-address ":${MINIO_CONSOLE_PORT:-9001}" /data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  createbucket:
    image: minio/mc
    depends_on:
      filehosting:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc config host add cokoServer http://filehosting:${S3_PORT:-9000} ${MINIO_ROOT_USER:-admin} ${MINIO_ROOT_PASSWORD:-superSecretAdminPassword};
        /usr/bin/mc admin user add cokoServer/ ${S3_ACCESS_KEY_ID:-nonRootUser} ${S3_SECRET_ACCESS_KEY:-nonRootPassword};
        /usr/bin/mc admin user enable cokoServer/ ${S3_ACCESS_KEY_ID:-nonRootUser};
        /usr/bin/mc mb cokoServer/${S3_BUCKET:-uploads};
        /usr/bin/mc admin policy attach cokoServer/ readwrite --user ${S3_ACCESS_KEY_ID:-nonRootUser};
        exit 0;
      "

volumes:
  minio_storage:
