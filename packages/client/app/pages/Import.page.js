/* eslint-disable no-alert */
import React from 'react'
import { useMutation } from '@apollo/client'
import { useHistory, useParams, useLocation } from 'react-router-dom'
import { useCurrentUser } from '@coko/client'
import styled from 'styled-components'

import { INGEST_WORD_FILES, DELETE_BOOK_COMPONENT } from '../graphql'
import { Import } from '../ui/createBook'
import Spin from '../ui/common/Spin'

import { isOwner, hasEditAccess, isAdmin } from '../helpers/permissions'
import {
  showUnauthorizedActionModal,
  showGenericErrorModal,
} from '../helpers/commonModals'

const StyledSpin = styled(Spin)`
  display: flex;
  margin-bottom: 20px;
  place-content: center;
`

const Wrapper = styled.div`
  display: grid;
  flex-direction: column;
  height: calc(100% - 48px);
  place-content: center;
`

const Loader = () => (
  <Wrapper>
    <StyledSpin spinning />
    Your files are being uploaded...
  </Wrapper>
)

const ImportPage = () => {
  const history = useHistory()
  const { bookId } = useParams()
  const location = useLocation()
  const { state, pathname } = location
  const redirectToDashboard = () => history.push('/dashboard')

  const [deleteAutogeneratedComponent, { loading: deleteLoading }] =
    useMutation(DELETE_BOOK_COMPONENT, {
      onCompleted() {
        // reset state to protect avoid deleting chapters if user navigates back to the page
        window.history.replaceState({}, '', pathname)
      },
    })

  const [ingestWordFiles, { loading }] = useMutation(INGEST_WORD_FILES, {
    onCompleted: () => {
      history.push(`/books/${bookId}/rename`)
    },
    onError: err => {
      if (err.toString().includes('Not Authorised')) {
        return showUnauthorizedActionModal(true, redirectToDashboard)
      }

      return showGenericErrorModal(redirectToDashboard)
    },
  })

  const { currentUser } = useCurrentUser()

  const canImport = currentUser
    ? isAdmin(currentUser) ||
      isOwner(bookId, currentUser) ||
      hasEditAccess(bookId, currentUser)
    : false

  const onClickContinue = async files => {
    if (!canImport) {
      return showUnauthorizedActionModal(true, redirectToDashboard)
    }

    const bookComponentFiles = files.map(file => ({
      file,
      bookId,
      componentType: 'chapter',
      divisionLabel: 'Body',
    }))

    // if uploading files right after creating a book, delete auto-generated chapter
    if (state?.createdChapterId) {
      await deleteAutogeneratedComponent({
        variables: {
          input: {
            id: state?.createdChapterId,
          },
        },
      })
    }

    return ingestWordFiles({
      variables: {
        bookComponentFiles,
      },
    })
  }

  if (!currentUser) return <Loader />

  if (!canImport && !loading) {
    showUnauthorizedActionModal(true, redirectToDashboard)
  }

  return (
    <Import
      canImport={canImport}
      loading={deleteLoading || loading}
      onClickContinue={onClickContinue}
    />
  )
}

export default ImportPage
