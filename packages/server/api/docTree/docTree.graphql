type DocTree {
  id: ID!
  key: ID!
  title: String!
  children: [DocTree]
  doc: Doc
  parentId: ID
  isFolder: Boolean
  identifier: String
}

type NewResource {
  id: ID!
  identifier: String
  title: String
  parentId: ID!
}

type CurrentFolderAndPath {
  path: [PathMap]
  currentFolder: DocTree
}

type PathMap {
  title: String!
  id: ID!
}

type FolderIdResponse {
  folderId: ID!
}

extend type Query {
  getDocTree(folderId: ID): String!
  getSharedDocTree: [DocTree]
  getResource(id: ID!): DocTree
  getParentFolderByIdentifier(identifier: String!): DocTree
  openFolder(id: ID, idType: String): CurrentFolderAndPath
  openRootFolder: CurrentFolderAndPath
}

extend type Mutation {
  addResource(id: ID, isFolder: Boolean!, identifier: String): NewResource!
  deleteResource(id: ID!): FolderIdResponse!
  renameResource(id: ID!, title: String!): FolderIdResponse!
  moveResource(id: ID!, newParentId: ID): FolderIdResponse!
  updateTreePosition(
    id: ID!
    newParentId: ID
    newPosition: Int!
  ): FolderIdResponse!
}
